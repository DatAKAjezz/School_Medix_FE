
import React, { useState, useEffect, useCallback } from "react";
import axiosClient from "../config/axiosClient"; // Ensure path matches src/config/axiosClient.js
import { Plus, X, ChevronRight, Loader2, AlertCircle } from "lucide-react";

const NewVaccineCampaign = () => {
  const [campaignForm, setCampaignForm] = useState({
    vaccine_id: "",
    description: "",
    location: "",
    start_date: "",
    end_date: "",
  });
  const [vaccineForm, setVaccineForm] = useState({
    name: "",
    description: "",
  });
  const [showVaccineModal, setShowVaccineModal] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [vaccines, setVaccines] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  // Fetch vaccines
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const vaccineResponse = await axiosClient.get("/vaccine");
        console.log("Vaccines response:", vaccineResponse.data);
        if (vaccineResponse.data.error) {
          setError(vaccineResponse.data.message);
        } else {
          setVaccines(vaccineResponse.data.data || []);
        }
      } catch (err) {
        console.error("Fetch error:", err);
        setError(
          err.response?.data?.message ||
            "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server. Vui l√≤ng ki·ªÉm tra backend."
        );
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, []);

  // Set default vaccine_id
  useEffect(() => {
    if (vaccines.length > 0 && !campaignForm.vaccine_id) {
      setCampaignForm((prev) => ({
        ...prev,
        vaccine_id: vaccines[0].id.toString(),
      }));
    }
  }, [vaccines]);

  const handleCampaignChange = useCallback((e) => {
    const { name, value } = e.target;
    setCampaignForm((prev) => ({ ...prev, [name]: value }));
  }, []);

  const handleVaccineChange = useCallback((e) => {
    const { name, value } = e.target;
    setVaccineForm((prev) => ({ ...prev, [name]: value }));
  }, []);

  const handleCampaignSubmit = useCallback(
    async (e) => {
      e.preventDefault();
      setError("");
      setSuccess("");
      setIsLoading(true);

      if (!campaignForm.vaccine_id) {
        setError("Vui l√≤ng ch·ªçn vaccine");
        setIsLoading(false);
        return;
      }
      if (!campaignForm.description.trim()) {
        setError("Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi·∫øn d·ªãch");
        setIsLoading(false);
        return;
      }
      if (!campaignForm.location.trim()) {
        setError("Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm");
        setIsLoading(false);
        return;
      }
      if (!campaignForm.start_date || !campaignForm.end_date) {
        setError("Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c");
        setIsLoading(false);
        return;
      }
      if (new Date(campaignForm.end_date) < new Date(campaignForm.start_date)) {
        setError("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu");
        setIsLoading(false);
        return;
      }

      try {
        console.log("Submitting campaign:", campaignForm);
        const response = await axiosClient.post("/vaccination-campaign", campaignForm);
        setSuccess(response.data.message || "T·∫°o chi·∫øn d·ªãch th√†nh c√¥ng");
        setCampaignForm({
          vaccine_id: vaccines.length > 0 ? vaccines[0].id.toString() : "",
          description: "",
          location: "",
          start_date: "",
          end_date: "",
        });
      } catch (err) {
        console.error("Campaign submit error:", err);
        setError(
          err.response?.data?.message ||
            "L·ªói h·ªá th·ªëng khi t·∫°o chi·∫øn d·ªãch. Vui l√≤ng ki·ªÉm tra server."
        );
      } finally {
        setIsLoading(false);
      }
    },
    [campaignForm, vaccines]
  );

  const handleVaccineSubmit = useCallback(
    async (e) => {
      e.preventDefault();
      setError("");
      setSuccess("");
      setIsLoading(true);

      if (!vaccineForm.name.trim()) {
        setError("Vui l√≤ng nh·∫≠p t√™n vaccine");
        setIsLoading(false);
        return;
      }
      if (!vaccineForm.description.trim()) {
        setError("Vui l√≤ng nh·∫≠p m√¥ t·∫£ vaccine");
        setIsLoading(false);
        return;
      }

      // Validate description format
      const descriptionRegex = /b·ªánh\s+(.+?)(?=\s+-)/i;
      const diseaseMatch = vaccineForm.description.match(descriptionRegex);
      if (!diseaseMatch || !diseaseMatch[1]) {
        setError(
          "M√¥ t·∫£ ph·∫£i c√≥ ƒë·ªãnh d·∫°ng: 'b·ªánh [T√™n b·ªánh] - [Chi ti·∫øt]'. V√≠ d·ª•: 'Ph√≤ng b·ªánh S·ªüi - V·∫Øc-xin cho tr·∫ª em'"
        );
        setIsLoading(false);
        return;
      }

      const payload = {
        name: vaccineForm.name.trim(),
        description: vaccineForm.description.trim(),
      };

      try {
        console.log("Submitting vaccine:", payload);
        const response = await axiosClient.post("/vaccine", payload);
        setSuccess(response.data.message || "T·∫°o vaccine m·ªõi th√†nh c√¥ng");
        setVaccineForm({ name: "", description: "" });
        setShowVaccineModal(false);
        // Refresh vaccine list
        const vaccineResponse = await axiosClient.get("/vaccine");
        console.log("Refreshed vaccines:", vaccineResponse.data);
        if (!vaccineResponse.data.error) {
          setVaccines(vaccineResponse.data.data || []);
        }
      } catch (err) {
        console.error("Vaccine submit error:", err);
        const errorMessage = err.response?.data?.message;
        if (err.response?.status === 409) {
          setError(`Vaccine "${vaccineForm.name}" ƒë√£ t·ªìn t·∫°i`);
        } else if (err.response?.status === 400 && errorMessage?.includes("Cannot extract disease name")) {
          setError(
            "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t t√™n b·ªánh t·ª´ m√¥ t·∫£. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng: 'b·ªánh [T√™n b·ªánh] - [Chi ti·∫øt]'"
          );
        } else if (err.response?.status === 400 && errorMessage?.includes("Cannot find disease ID")) {
          setError(
            `T√™n b·ªánh "${diseaseMatch[1].trim()}" kh√¥ng t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i.`
          );
        } else if (err.response?.status === 400 && errorMessage?.includes("Missing required fields")) {
          setError("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.");
        } else {
          setError(errorMessage || "L·ªói h·ªá th·ªëng khi t·∫°o vaccine. Vui l√≤ng ki·ªÉm tra server.");
        }
      } finally {
        setIsLoading(false);
      }
    },
    [vaccineForm]
  );

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      {/* Breadcrumb */}
      <div className="flex items-center text-sm text-gray-600 mb-4">
        <span>üè† Trang ch·ªß</span>
        <ChevronRight size={16} className="mx-2" />
        <span>Qu·∫£n l√Ω chi·∫øn d·ªãch ti√™m ch·ªßng</span>
        <ChevronRight size={16} className="mx-2" />
        <span>Th√™m k·∫ø ho·∫°ch m·ªõi</span>
      </div>

      {/* Header */}
      <h1 className="text-2xl font-bold text-gray-900 mb-6">
        Th√™m K·∫ø Ho·∫°ch Ho·∫°t ƒê·ªông Y T·∫ø
      </h1>

      {/* Campaign Form */}
      <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
        <h2 className="text-lg font-semibold mb-4">T·∫°o K·∫ø Ho·∫°ch M·ªõi</h2>
        {error && (
          <div className="flex items-center text-red-600 text-sm mb-4">
            <AlertCircle size={16} className="mr-2" />
            {error}
          </div>
        )}
        {success && (
          <div className="flex items-center text-green-600 text-sm mb-4">
            <svg
              className="w-4 h-4 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M5 13l4 4L19 7"
              />
            </svg>
            {success}
          </div>
        )}
        {isLoading && (
          <div className="flex items-center text-gray-600 text-sm mb-4">
            <Loader2 className="animate-spin mr-2" size={16} />
            ƒêang x·ª≠ l√Ω...
          </div>
        )}
        <form onSubmit={handleCampaignSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Vaccine</label>
            <select
              name="vaccine_id"
              value={campaignForm.vaccine_id}
              onChange={handleCampaignChange}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
              required
              disabled={isLoading}
            >
              <option value="">Ch·ªçn vaccine</option>
              {vaccines.map((vaccine) => (
                <option key={vaccine.id} value={vaccine.id}>
                  {vaccine.name} ({vaccine.disease_name})
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">M√¥ t·∫£</label>
            <textarea
              name="description"
              value={campaignForm.description}
              onChange={handleCampaignChange}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
              rows="4"
              required
              placeholder="Nh·∫≠p m√¥ t·∫£ chi·∫øn d·ªãch"
              disabled={isLoading}
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ƒê·ªãa ƒëi·ªÉm</label>
            <input
              type="text"
              name="location"
              value={campaignForm.location}
              onChange={handleCampaignChange}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
              required
              placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm"
              disabled={isLoading}
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Ng√†y b·∫Øt ƒë·∫ßu</label>
              <input
                type="date"
                name="start_date"
                value={campaignForm.start_date}
                onChange={handleCampaignChange}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
                required
                disabled={isLoading}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Ng√†y k·∫øt th√∫c</label>
              <input
                type="date"
                name="end_date"
                value={campaignForm.end_date}
                onChange={handleCampaignChange}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
                required
                disabled={isLoading}
              />
            </div>
          </div>
          <div className="flex justify-end gap-2 pt-4">
            <button
              type="button"
              onClick={() => setShowVaccineModal(true)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 text-sm font-medium"
              disabled={isLoading}
            >
              <Plus size={16} />
              Th√™m Vaccine M·ªõi
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm font-medium"
              disabled={isLoading}
            >
              {isLoading ? (
                <Loader2 className="animate-spin inline-block mr-2" size={16} />
              ) : null}
              T·∫°o K·∫ø Ho·∫°ch
            </button>
          </div>
        </form>
      </div>

      {/* Vaccine Modal */}
      {showVaccineModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Th√™m Vaccine M·ªõi</h3>
              <button onClick={() => setShowVaccineModal(false)} disabled={isLoading}>
                <X size={20} />
              </button>
            </div>
            <form onSubmit={handleVaccineSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">T√™n Vaccine</label>
                <input
                  type="text"
                  name="name"
                  value={vaccineForm.name}
                  onChange={handleVaccineChange}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
                  required
                  placeholder="Nh·∫≠p t√™n vaccine (VD: V·∫Øc-xin S·ªüi)"
                  disabled={isLoading}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">M√¥ t·∫£</label>
                <textarea
                  name="description"
                  value={vaccineForm.description}
                  onChange={handleVaccineChange}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
                  rows="4"
                  required
                  placeholder="Ph√≤ng b·ªánh S·ªüi - V·∫Øc-xin ph√≤ng ng·ª´a b·ªánh s·ªüi cho tr·∫ª em"
                  disabled={isLoading}
                />
                <p className="text-xs text-gray-500 mt-1">
                  M√¥ t·∫£ ph·∫£i c√≥ ƒë·ªãnh d·∫°ng: "b·ªánh [T√™n b·ªánh] - [Chi ti·∫øt]". T√™n b·ªánh ph·∫£i t·ªìn t·∫°i (VD: S·ªüi, Quai b·ªã).
                </p>
              </div>
              <div className="flex justify-end gap-2 pt-4">
                <button
                  type="button"
                  onClick={() => setShowVaccineModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 text-sm"
                  disabled={isLoading}
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm font-medium"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <Loader2 className="animate-spin inline-block mr-2" size={16} />
                  ) : null}
                  Th√™m Vaccine
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default NewVaccineCampaign;
